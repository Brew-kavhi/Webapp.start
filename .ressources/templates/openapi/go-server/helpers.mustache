{{>partial_header}}
package {{packageName}}

import (
	"reflect"
	"errors"
	"strings"
	"database/sql/driver"
)

// Response return a ImplResponse struct filled
func Response(code int, body interface{}) ImplResponse {
	return ImplResponse {
		Code: code,
		{{#addResponseHeaders}}
		Headers: nil,
		{{/addResponseHeaders}}
		Body: body,
	}
}
{{#addResponseHeaders}}

// ResponseWithHeaders return a ImplResponse struct filled, including headers
func ResponseWithHeaders(code int, headers map[string][]string, body interface{}) ImplResponse {
	return ImplResponse {
		Code: code,
		Headers: headers,
		Body: body,
	}
}
{{/addResponseHeaders}}

// IsZeroValue checks if the val is the zero-ed value.
func IsZeroValue(val interface{}) bool {
	return val == nil || reflect.DeepEqual(val, reflect.Zero(reflect.TypeOf(val)).Interface())
}

// AssertRecurseInterfaceRequired recursively checks each struct in a slice against the callback.
// This method traverse nested slices in a preorder fashion.
func AssertRecurseInterfaceRequired[T any](obj interface{}, callback func(T) error) error {
	return AssertRecurseValueRequired(reflect.ValueOf(obj), callback)
}

// AssertRecurseValueRequired checks each struct in the nested slice against the callback.
// This method traverse nested slices in a preorder fashion. ErrTypeAssertionError is thrown if
// the underlying struct does not match type T.
func AssertRecurseValueRequired[T any](value reflect.Value, callback func(T) error) error {
	switch value.Kind() {
	// If it is a struct we check using callback
	case reflect.Struct:
		obj, ok := value.Interface().(T)
		if !ok {
			return ErrTypeAssertionError
		}

		if err := callback(obj); err != nil {
			return err
		}

	// If it is a slice we continue recursion
	case reflect.Slice:
		for i := 0; i < value.Len(); i++ {
			if err := AssertRecurseValueRequired(value.Index(i), callback); err != nil {
				return err
			}
		}
	}
	return nil
}

func Has(a string, list []string) bool {
	for _,b := range list {
		if b == a {
			return true
		}
	}
	return false
}
type StringList []string

func (o *StringList) Scan(src any) error {
 bytes, ok := src.([]byte)
 if !ok {
  return errors.New("src value cannot cast to []byte")
 }
 *o = strings.Split(string(bytes), ",")
 return nil
}

func (o StringList) Value() (driver.Value, error) {
 if len(o) == 0 {
  return nil, nil
 }
 return strings.Join(o, ","), nil
}
